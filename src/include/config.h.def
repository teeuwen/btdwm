/*
 *
 * btdwm
 * config.h
 *
 */

#include <confdef.h>

/*
 * General
 *
 * Functions:
 *  - focusclient(int): cycle through client stack on selected tags
 *      int: -1 and 1 cycle backwards and forwards through the stack
 *           respectively
 *             -2 and 2, wrap around and trigger the E_CLIENT event as well
 *  - focusmon(int): change focus to another monitor
 *      int: -1 and 1 change focus to the monitor before or after the selected
 *           monitor respectively
 *  - killclient(void): kill the selected client
 *  - moveclient: TODO NYI
 *  - moveclientm(void): move client using mouse
 *  - quit(void): quit btdwm
 *  - resizeclient: TODO NYI
 *  - resizeclientm(void): resize client using mouse
 *  - sendmon(int): send the selected client to another monitor
 *      int: -1 and 1 move the client to the monitor before or after the
 *           selected monitor respectively
 *             -2 and 2 in addition, change focus the newly selected monitor as
 *           well
 *  - sendtag(int): send the selected client to another tag
 *      int: index of the tag to send the client to
 *  - setlayout(int): set the layout of the selected tag
 *      int: index of the new layout
 *             -2 and -1 cycle backwards and forwards through layouts
 *           respectively
 *  - setmfact(double): increase of decrease the mfact for the selected tag
 *      double: number of pixels to increase or decrease mfact with
 *  - spawn(const char **): create a new process
 *      const char **: argv to pass to execvp
 *  - togglebar(void): toggle visibility of bar
 *  - togglefloating(void): toggle floating property of selected client
 *  - togglefullscr(void): toggle fullscreen property of selected client
 *  - toggleontop(void): toggle always on top property of selected client
 *  - togglesticky(void): toggle sticky property of selected client
 *  - toggletag(int): toggle visibility of tag
 *      int: index of the tag to toggle visibility of
 *  - viewtag(int): switch to tag
 *      int: index of the tag to switch to
 *             -2 and -1 cycle backwards and forwards through tags respectively
 *
 *
 * Events:
 *  - E_CLIENT: on client focus change
 *      %n: first occurrence of %n in any argv will be replaced by the WM_NAME
 *          of the selected client
 *          (double quotes are automatically escaped with \)
 *            escape using %
 *  - E_LAYOUT: on layout change
 *      %n: first occurrence of %n in any argv will be replaced by the name of
 *          the selected layout specified below
 *          (double quotes are automatically escaped with \)
 *            escape using %
 *  - E_TAG: on tag toggle or switch: TODO NYI
 *      %n: first occurrence of %n in any argv will be replaced by an array
 *          separated by commas (double quotes are automatically escaped with \)
 *            array entries consist of 2 characters, the first can either be
 *          '1' or '0' to indicate either a focused or unfocused tag
 *          respectively
 *            the second character indicates the status of the tag:
 *          'a' indicates an active tag, 'c' indicates the selected tag,
 *          'i' indicates an inactive tag and 'u' indicates an urgent tag
 *
 * Mouse events:
 *  - H_TAG: on tag hover
 *  - H_CLIENT: on client hover
 */


/*
 * Appearance
 */

static const char font_desc[]		= "sans-serif 8";

static const char bg[]			= "#000000";

static const char fg[]			= "#FFFFFF";
static const char fg_light[]		= "#808080";

static const char status_active[]	= "#008000";
static const char status_select[]	= "#FFFFFF";
static const char status_urgent[]	= "#FFA500";


/*
 * Layouts
 *
 * These can usually be left alone, you might want to change the name perhaps
 */

static struct layout layouts[] = {
	/* Name		Layout */
	{ "Floating",	NULL },
	{ "Tiling",	&tile },
	{ "Maximize",	&max }
};


/*
 * Tags
 *
 * Tags are static, unlike in window managers like i3
 * Layouts can be switched dynamically using setlayout
 */

static const struct tag tags[] = {
	/* Name		Layout */
	{ "1",		&layouts[1] },
	{ "2",		&layouts[2] },
	{ "3",		&layouts[0] },
	{ "4",		&layouts[1] },
	{ "5",		&layouts[2] },
	{ "6",		&layouts[0] },
	{ "7",		&layouts[1] },
	{ "8",		&layouts[1] },
	{ "9",		&layouts[1] }
};


/*
 * Rules
 *
 * Rules are used to override default layout or application behavior
 * Rules are parsed on every property change, go crazy
 */

static const struct rule rules[] = {
	/* Class	Instance	Title		Float.	Transparent */
	{ NULL,		NULL,		NULL,		0,	0 }
};


/*
 * Hooks
 *
 * Hooks are used to communicate with the rest of the system by executing other
 *   binaries or scripts
 * See the top of this file for a list of all hooks and functions
 * WARNING: Always include a NULL entry to terminate the array!
 */

static const struct hook hooks[] = {
	/* Event		Command */
	{ 0,			NULL }
};


/*
 * Key bindings
 *
 * See the top of this file for a list of all functions
 * keysym.h contains a list of all keys
 * Additional keysym codes can be viewed in /usr/include/X11/keysymdef.h
 */

static const struct key keys[] = {
	/* Mask			Key	Function	Args. */
	{ K_SUPER | K_CTRL,	K_Q,	quit,		{ 0 } },

	/* Global */
	{ K_SUPER | K_SHIFT,	K_F,	togglebar,	{ 0 } },

	{ K_SUPER | K_SHIFT,	K_SPACE,setlayout,	{ .i = -2 } },
	{ K_SUPER,		K_SPACE,setlayout,	{ .i = -1 } },

	{ K_SUPER,		K_UP,	focusclient,	{ .i = -1 } },
	{ K_SUPER,		K_DOWN,	focusclient,	{ .i = +1 } },
	{ K_SUPER,		K_LEFT,	focusclient,	{ .i = -1 } },
	{ K_SUPER,		K_RIGHT,focusclient,	{ .i = +1 } },
	{ K_ALT | K_SHIFT,	K_TAB,	focusclient,	{ .i = -2 } },
	{ K_ALT,		K_TAB,	focusclient,	{ .i = +2 } },

	/* Tags */
	{ TAGKEYS(K_1, 0) },
	{ TAGKEYS(K_2, 1) },
	{ TAGKEYS(K_3, 2) },
	{ TAGKEYS(K_4, 3) },
	{ TAGKEYS(K_5, 4) },
	{ TAGKEYS(K_6, 5) },
	{ TAGKEYS(K_7, 6) },
	{ TAGKEYS(K_8, 7) },
	{ TAGKEYS(K_9, 8) },

	{ K_SUPER | K_SHIFT,	K_TAB,	viewtag,	{ .i = -2 } },
	{ K_SUPER,		K_TAB,	viewtag,	{ .i = -1 } },

	/* Clients */
	{ K_SUPER,		K_Q,	killclient,	{ 0 } },

	{ K_SUPER | K_CTRL,	K_SPACE,togglefloating,	{ 0 } },
	{ K_SUPER,		K_F,	togglefullscr,	{ 0 } },
	{ K_SUPER,		K_T,	toggleontop,	{ 0 } },
	{ K_SUPER,		K_Y,	togglesticky,	{ 0 } },

	{ K_SUPER | K_SHIFT,	K_LEFT,	setmfact,	{ .d = -0.05 } },
	{ K_SUPER | K_SHIFT,	K_RIGHT,setmfact,	{ .d = +0.05 } },

	/* Multihead */
	{ K_SUPER,		K_BL,	focusmon,	{ .i = -1 } },
	{ K_SUPER,		K_BR,	focusmon,	{ .i = +1 } },
	{ K_SUPER,		K_O,	sendmon,	{ .i = +1 } }
};


/*
 * Mouse bindings
 *
 * See the top of this file for a list of all mouse events and functions
 */

static const struct button buttons[] = {
	/* Mask		Button		Mouse event	Function	Args. */
	{ 0,		B_LEFT,		H_TAG,		viewtag,	{ 0 } },
	{ 0,		B_RIGHT,	H_TAG,		toggletag,	{ 0 } },
	{ K_SUPER,	B_LEFT,		H_TAG,		sendtag,	{ 0 } },

	{ K_SUPER,	B_LEFT,		H_CLIENT,	moveclientm,	{ 0 } },
	{ K_SUPER,	B_RIGHT,	H_CLIENT,	resizeclientm,	{ 0 } }
};
